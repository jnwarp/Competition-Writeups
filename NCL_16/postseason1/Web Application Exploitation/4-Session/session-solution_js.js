
var crypto = require('crypto');
var XOR = require('buffer-xor');

function defaultSession () {
  return '{"username":"guest","secret":"84983c60f7daadc1cb8698621f802c0d9f9a3c3c295c810748fb048115c186ec"}';
}

function obtainSession (sessionCiphertext) {
  var ciphertext = Buffer.from(sessionCiphertext);
  var cipher = crypto.createCipher('aes-128-ctr', PSK);
  var blocks = cipher.update(Buffer.alloc(ciphertext.length, 0x00));
  var plaintext = XOR(ciphertext, blocks);
  console.log(plaintext.toString('utf-8'));
  return JSON.parse(plaintext);
}

function validateSession (sessionCiphertext, sessionHmac) { // delimited by -
  var session = myObtainSession(sessionCiphertext);
  if (!session) {
    return false;
  }
  var hmac = crypto.createHmac('sha256', session.secret);
  hmac.update(Buffer(sessionCiphertext, 'hex'));
  if (hmac.digest().toString('hex') !== sessionHmac) {
    return false;
  }
  return true;
}


// SOLUTION
var cookie = '9a1317cb974cdfecd35e87229dae6a69e3daded2c911944103922f4580fe900b3309480f95167ecf6813c4e7a15664621120d860c29a80e95b444c738d47855bd4e1d5bb7192f543f7035900c044b037d016d5ae382dd05c16a0c1d030798e21-a1e0967fec3cffeb6bf2f0bce8e4fdce634045a46d873dbe39617652a723f7be';
var ciphertext = Buffer('9a1317cb974cdfecd35e87229dae6a69e3daded2c911944103922f4580fe900b3309480f95167ecf6813c4e7a15664621120d860c29a80e95b444c738d47855bd4e1d5bb7192f543f7035900c044b037d016d5ae382dd05c16a0c1d030798e21', 'hex');
var session = Buffer(defaultSession(), 'utf-8');
var blocks = XOR(ciphertext, session); // because the inverse of XOR is XOR

/*
`blocks` turns out to be 'e13162b8f23eb18dbe3ba518bfc91f0c90aefcfeeb62f12271f75b67badca83f0a317b6ca32618f80c72a583c26707002916e158f4a8b18f63747e10bd23bc3ded80e6d842f1c77ac2606131f073840fb674e59a001ce1697591f9e6551aac5c'
so we basically know the password at this point
*/

function mySession () {
  return '{"username":"admin","secret":"84983c60f7daadc1cb8698621f802c0d9f9a3c3c295c810748fb048115c186ec"}';
}

function createCiphertext (session) {
  var blocks = XOR(Buffer(defaultSession(), 'utf-8'), Buffer(ciphertext, 'hex'));
  return XOR(Buffer(session, 'utf-8'), blocks).toString('hex');
}

function myObtainSession (sessionCiphertext) {
  var ciphertext = Buffer(sessionCiphertext, 'hex');
  var blocks = Buffer('e13162b8f23eb18dbe3ba518bfc91f0c90aefcfeeb62f12271f75b67badca83f0a317b6ca32618f80c72a583c26707002916e158f4a8b18f63747e10bd23bc3ded80e6d842f1c77ac2606131f073840fb674e59a001ce1697591f9e6551aac5c', 'hex');
  var plaintext = XOR(ciphertext, blocks);
  return JSON.parse(plaintext);
}

function myValidateSession (sessionCiphertext, sessionHmac) { // delimited by -
  var session = myObtainSession(sessionCiphertext);
  if (!session) {
    return false;
  }
  var hmac = crypto.createHmac('sha256', session.secret);
  hmac.update(Buffer(sessionCiphertext, 'hex'));
  return hmac.digest().toString('hex') === sessionHmac;
}

function createSession (session) {
  var hmac = crypto.createHmac('sha256', JSON.parse(session).secret);
  var ciphertext = createCiphertext(session);
  hmac.update(Buffer(ciphertext, 'hex'));
  return ciphertext.toString('hex') + '-' + hmac.digest().toString('hex');
}

// make sure guest is working
let defaultToken = createSession(defaultSession());
console.log(defaultToken);
let [defaultCipher, defaultHmac] = defaultToken.split('-');

// guest validates
console.log(myValidateSession(defaultCipher, defaultHmac));

// create our admin token
let adminToken = createSession(mySession());
console.log(adminToken);
let [adminCipher, adminHmac] = adminToken.split('-');

// admin validates
console.log(myValidateSession(adminCipher, adminHmac));
